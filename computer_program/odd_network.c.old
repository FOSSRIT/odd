#include "odd.h"

void *networkListen(char *buffer)
{
	int list_s;		//Listening socket
	int conn_s;		//connection socket
	short int port = INCPORT;	//port number
	struct sockaddr_in servaddr;	//socket address struct
	char* tok;		//To split off tokens from input
	printf("Starting socket\n");
	if((list_s = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
	{
		printf("Error making listening socket\n");
		exit(EXIT_FAILURE);
	}

	memset(&servaddr, 0, sizeof(servaddr));
	servaddr.sin_family = AF_INET;
	servaddr.sin_addr.s_addr = inet_addr("127.0.0.1");//htonl(INADDR_ANY);
	servaddr.sin_port = htons(port);

	int yes = 1;

	if(setsockopt(list_s, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int)) == -1)
	{
		printf("Error setting socket options\n");
		exit(EXIT_FAILURE);
	}



	printf("Binding to socket\n");
	if(bind(list_s, (struct sockaddr *) &servaddr, sizeof(servaddr)) < 0)
	{
		printf("Error calling bind\n");
		exit(EXIT_FAILURE);
	}
	printf("Setting socket to listen\n");
	if(listen(list_s, LISTENQ) < 0)
	{
		printf("Error calling listen\n");
		exit(EXIT_FAILURE);
	}
	printf("Accepting on socket\n");
	if((conn_s = accept(list_s, NULL, NULL)) < 0)
	{
		printf("Error calling accept\n");
		exit(EXIT_FAILURE);
	}
	while(!done)
	{
		printf("Connection made\n");
		if(read(conn_s, buffer, 255) < 0)
		{
			printf("Error reading\n");
			exit(EXIT_FAILURE);
		}
		printf("Received: %s\n", buffer);
		
		int r = 0, g = 0, b = 0;

		char* temp = buffer;
		char* line = buffer;
		
		line = temp;
		temp = strchr(buffer, '!');
		if(temp != NULL)
			*temp++ = '\0';

		while(line != NULL && strcmp(line,""))
		{
			//printf("Line: '%s'\n", line);
			tok = strchr(line, ' ');
			*tok++ = '\0';
			//printf("Tok: '%s'\n", tok);
			if(!strcmp(line,"exit"))
			{
				if(write(conn_s, "ok", 2) < 0)
				{
					printf("Error writing\n");
					exit(EXIT_FAILURE);
				}
				done = 1;
				printf("Closing the connection\n");

				if(close(conn_s) < 0)
				{
					printf("Error closing\n");
					exit(EXIT_FAILURE);
				}
			}
			else if(!strcmp(line,"remove"))
			{
				if(write(conn_s, "ok", 2) < 0)
				{
					printf("Error writing\n");
					exit(EXIT_FAILURE);
				}
				char* tmp = strchr(tok, ' ');
				*tmp = '\0';
				removeAnimation(atoi(tok));
			}
			else if(!strcmp(line,"time"))
			{
				if(write(conn_s, "ok", 2) < 0)
				{
					printf("Error writing\n");
					exit(EXIT_FAILURE);
				}
				printf("Time: %Lf\n", totalTime);
			}
			else if(!strcmp(line,"stop"))
			{
				if(write(conn_s, "ok", 2) < 0)
				{
					printf("Error writing\n");
					exit(EXIT_FAILURE);
				}
				for(int i = numAnimations; i > 0; i--)
					removeAnimation(0);
			}
			else if(!strcmp(line,"sup"))
			{
				printf("Sup received\n");
				char reply[4096];
				reply[0] = '\0';
				char *temp;
				char *temp2;
				if(numAnimations != 0)
				{
					for(int i = 0; i < numAnimations; i++)
					{
						printf("Processing animation %i\n", i);
						if(animations[i]->function == setAll)
							temp = "setall";
						else if(animations[i]->function == strobe)
							temp = "strobe";
						else if(animations[i]->function == smoothStrobe)
							temp = "smoothstrobe";
						else if(animations[i]->function == cylonEye)
							temp = "cyloneye";
						else if(animations[i]->function == sinAnimation)
							temp = "sinanimation";
						if(animations[i]->modifier == addLeds)
							temp2 = "add";
						else if(animations[i]->modifier == subtractLeds)
							temp2 = "subtract";
						else if(animations[i]->modifier == multiplyLeds)
							temp2 = "multiply";

						sprintf(reply, "%s%s ", reply, temp);
						for(int j = 0; j < numParams(animations[i]->function); j++)
						{
							sprintf(reply, "%s%f@", reply, animations[i]->params[j]);
						}
						sprintf(reply, "%s %i %i %i %s !", reply, animations[i]->color->R, animations[i]->color->G, animations[i]->color->B, temp2);

					}

					printf("Sending:%s\n", reply);

					if(write(conn_s, reply, strlen(reply)) < 0)
					{
						printf("Error writing\n");
						exit(EXIT_FAILURE);
					}

					printf("Animation sent.\n");
				}
				else
					if(write(conn_s, "Not much, you?", 14) < 0)
					{
						printf("Error writing\n");
						exit(EXIT_FAILURE);
					}
			}
			else
			{
				if(write(conn_s, "ok", 2) < 0)
				{
					printf("Error writing\n");
					exit(EXIT_FAILURE);
				}

				//printf("Animation stuff\n------------------------------------\n)");
				
				char* animName = line;
				//printf("animName: %s\n", animName);

				char* temp = tok;
				//printf("Temp: '%s'\n", temp);
				// *temp++ = '\0';
				
				int numParams = timesThisCharOccurs('@', tok);
				double params[numParams];
				//printf("Making the params, should be %i params\n", numParams);

				for(int i = 0; i < numParams; i++)
				{
					char* firstAt;
					//printf("Temp is now: '%s'\n", temp);
					params[i] = strtod(temp, &firstAt);
					//printf("Parameter %i is %f\n", i, params[i]);
					temp = firstAt + 1;
				}
				
				//printf("Temp is now: '%s'\n", temp);

				char* rc = temp;
				*rc++ = '\0';
				//printf("rc: %s\n", rc);
				
				char* gc = strchr(rc, ' ');
				*gc++ = '\0';
				//printf("gc: %s\n", gc);
				
				char* bc = strchr(gc, ' ');
				*bc++ = '\0';
				//printf("bc: %s\n", bc);
				
				char* modifier = strchr(bc, ' ');
				*modifier++ = '\0';

				char* endSpace = strchr(modifier, ' ');
				*endSpace++ = '\0';

				r = atoi(rc);
				g = atoi(gc);
				b = atoi(bc);

				if(r < 0)
					r = 0;
				if(b < 0)
					b = 0;
				if(g < 0)
					g = 0;
				if(r > 4095)
					r = 4095;
				if(b > 4095)
					b = 4095;
				if(g > 4095)
					g = 4095;
				
				void(*animation_function)(double*, double, odd_led_t*, odd_led_t *[NUM_LEDS]) = NULL;
				void(*animation_modifier)( odd_led_t* leds[NUM_LEDS], odd_led_t *[NUM_LEDS] ) = NULL;
				if(!strcmp(animName,"cyloneye"))
					animation_function = cylonEye;
				if(!strcmp(animName, "cyloneye-l"))
					animation_function = cylonEye_Linear;
				if(!strcmp(animName,"strobe"))
					animation_function = strobe;
				if(!strcmp(animName,"setall"))
					animation_function = setAll;
				if(!strcmp(animName,"smoothstrobe"))
					animation_function = smoothStrobe;
				if(!strcmp(animName,"sin"))
					animation_function = sinAnimation;
				if(!strcmp(modifier,"add"))
					animation_modifier = addLeds;
				if(!strcmp(modifier,"subtract"))
					animation_modifier = subtractLeds;
				if(!strcmp(modifier,"inversesubtract"))
					animation_modifier = inverseSubtractLeds;
				if(!strcmp(modifier,"multiply"))
					animation_modifier = multiplyLeds;

				odd_led_t* color = malloc(sizeof(odd_led_t));
				color->R = r;
				color->G = g;
				color->B = b;
			
				printf("Animation: '%s'\n",animName);
				printf("Speed: '%f'\n",params[0]);
				printf("Radius: '%f'\n",params[1]);
				printf("R: '%i'\n",color->R);
				printf("G: '%i'\n",color->G);
				printf("B: '%i'\n",color->B);
				printf("Modifier: '%s'\n",modifier);

				if (!strcmp(animName, "update"))
				{
					updateAnimation(atoi(modifier), params, color);
				}
				else if(animation_function == NULL || animation_modifier == NULL)
					printf("Bad input?!\n");
				else
				{
					//printf("Animations: %i\n" , numAnimations);
					addAnimation(animation_function,params,color,animation_modifier);
					//printf("Animations: %i\n" , numAnimations);
				}
				
				//printf("<->\n");
				//printf("Speed: '%f'\n",animations[numAnimations - 1]->params[0]);
				//printf("Radius: '%f'\n",animations[numAnimations - 1]->params[1]);
				//printf("R: '%i'\n",animations[numAnimations - 1]->color->R);
				//printf("G: '%i'\n",animations[numAnimations - 1]->color->G);
				//printf("B: '%i'\n",animations[numAnimations - 1]->color->B);

			}
			line = temp;
			temp = strchr(buffer, '!');
			if(temp != NULL)
				*temp++ = '\0';

			//printf("Done and stuff\n");
		}
	}
	
	if(close(list_s) < 0)
	{
		printf("Error closing list_s\n");
		exit(EXIT_FAILURE);
	}
	return NULL;
}
